<?php
// $Id$

/**
 * @file
 *
 * This module allows site administrators to grant some roles the authority to
 * change roles assigned to users, without them needing the 'administer access
 * control' permission.
 *
 * It provides its own tab in the user profile so that roles can be changed
 * without needing access to the user edit form.
 */

/**
 * Implements hook_help().
 */
function role_delegation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#role_delegation':
      $output = '<p>' . t('This module allows site administrators to grant some roles the authority to assign selected roles to users, without them needing the <em>administer permissions</em> permission.') . '</p>';
      $output .= '<p>' . t('It provides its own tab in the user profile so that roles can be assigned without needing access to the user edit form.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function role_delegation_theme() {
  return array(
    'role_delegation_delegate_roles_action_form' => array(
      'render element' => 'form',
    ),
  );
};

/**
 * Implements hook_permission().
 */
function role_delegation_permission() {
  $roles = _role_delegation_roles();
  $perms['assign all roles'] = array(
    'title' => t('Assign all roles'),
    'description' => drupal_placeholder(t('Warning: Give to trusted roles only; this permission has security implications.')),
  );
  foreach ($roles as $rid => $role) {
    $perms["assign $role role"] = array(
      'title' => t('Assign %role role', array('%role' => $role)),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function role_delegation_menu() {
  $items['user/%user/roles'] = array(
    'title' => 'Delegate roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_delegation_roles_form', 1),
    'access callback' => 'role_delegation_access',
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Helper function to create the role options.
 */
function _role_delegation_add_roles_to_form(&$form, $account) {
  $roles_current = $account->roles;

  $roles_delegate = array();
  $roles = _role_delegation_roles();
  foreach ($roles as $rid => $role) {
    if (user_access('assign all roles') || user_access("assign $role role")) {
      $roles_delegate[$rid] = $role;
    }
  }

  if (empty($roles_delegate)) {
    // No role can be assigned.
    return;
  }

  if (!isset($form['account'])) {
    $form['account'] = array(
      '#type' => 'value',
      '#value' => $account,
    );
  }

  // Generate the form items.
  $form['account']['roles_change'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#options' => $roles_delegate,
    '#default_value' => array_keys(array_intersect_key($roles_current, $roles_delegate)),
    '#description' => t('Change roles assigned to user.'),
  );
}

/**
 * Provides a form for assigning roles to the current user.
 */
function role_delegation_roles_form($form, $form_state, $account) {
  _role_delegation_add_roles_to_form($form, $account);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Saves the roles assigned to the account given in the form.
 */
function role_delegation_roles_form_submit($form, &$form_state) {
  if (is_array($form_state['values']['roles_change']) && isset($form_state['values']['account']->uid)) {
    $uid = (int)$form_state['values']['account']->uid;
    role_delegation_save(array($uid), $form_state['values']['roles_change']);
    drupal_set_message(t('The roles have been updated.'));
  }
}

function role_delegation_save($uids, $roles_change) {
  $rolenames = user_roles(TRUE);
  foreach ($roles_change as $rid => $value) {
    if (!empty($value)) {
      // Use the role name for changed roles.
      $roles_change[$rid] = $rolenames[$rid];
    }
  }

  $accounts = user_load_multiple($uids);
  foreach ($accounts as $account) {
    $roles_current = $account->roles;
    $roles = array_filter($roles_change + $roles_current);
    user_save($account, array('roles' => $roles));
  }
}

/**
 * Access callback for menu hook.
 */
function role_delegation_access() {
  // Check access to user profile page.
  if (!user_access('access user profiles')) {
    return FALSE;
  }
  // Check if they can edit users. In that case, the Roles tab is not needed.
  if (user_access('administer users')) {
    return FALSE;
  }
  // Check access to role assignment page.
  if (user_access('administer permissions')) {
    return TRUE;
  }
  $perms = array_keys(role_delegation_permission());
  foreach ($perms as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns all existing roles, except anonymous and authenticated user.
 */
function _role_delegation_roles() {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  // Do not allow to delegate users to administator role. Let's keep this
  // privilege to users with 'Administer permissions' permission only.
  unset($roles[variable_get('user_admin_role', 0)]);
  return $roles;
}

/**
 * Implements of hook_form_alter().
 */
function role_delegation_form_alter(&$form, $form_state, $form_id) {
  if (!in_array($form_id, array('user_register_form', 'user_profile_form'))) {
    return;
  }
  if (user_access('administer permissions')) {
    return;
  }

  $account = $form['#user'];
  _role_delegation_add_roles_to_form($form, $account);
}

/**
 * Implements hook_user_presave().
 */
function role_delegation_user_presave(&$edit, $account, $category) {
  if (isset($edit['roles_change'])) {
    $edit['roles'] = array_filter($edit['roles_change'] + $edit['roles']);
    unset($edit['roles_change']);
  }
}

/**
 * Implements hook_action_info().
 */
function role_delegation_action_info() {
  return array(
    'role_delegation_delegate_roles_action' => array(
      'type' => 'user',
      'label' => t('Delegate roles'),
      'configurable' => TRUE,
      'triggers' => array(),
    ),
  );
}

function role_delegation_delegate_roles_action_form($context) {
  $form['#tree'] = TRUE;
  $form['#theme'] = 'role_delegation_delegate_roles_action_form';
  foreach (_role_delegation_roles() as $rid => $role_name) {
    $form['role_change'][$rid] = array(
      '#type' => 'select',
      '#title' => $role_name,
      '#default_value' => isset($context['roles_change'][$rid]) ? $context['roles_change'][$rid] : -1,
      '#options' => array(
        -1 => t('Do not change'),
        1 => t('Add this role'),
        0 => t('Remove this role'),
      ),
    );
  }
  return $form;
}

function theme_role_delegation_delegate_roles_action_form($variables) {
  $form = $variables['form'];

  $rows = array();
  $header = array(
    t('Role'),
    t('Operation'),
  );
  foreach (element_children($form['role_change']) as $key) {
    $role = $form['role_change'][$key]['#title'];
    unset($form['role_change'][$key]['#title']);
    $operation = drupal_render($form['role_change'][$key]);
    $row = array(
      array('data' => $role),
      array('data' => $operation),
    );
    $rows[] = $row;
  }
  $output = drupal_render($form['actions_label']);
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'role-delegation-table')));
  $output .= drupal_render_children($form);
  return $output;
}

function role_delegation_delegate_roles_action_submit($form, $form_state) {
  $roles_change = array();
  foreach ($form_state['values']['role_change'] as $rid => $value) {
    if ($value > -1) {
      $roles_change[$rid] = $value;
    }
  }

  return array('roles_change' => $roles_change);
}

function role_delegation_delegate_roles_action(&$user, $context) {
  $roles_current = $user->roles;
  $roles_change = $context['roles_change'];
  role_delegation_save(array($user->uid), $roles_change);
}
