<?php

/**
 * @file
 *
 * This module allows site administrators to grant some roles the authority to
 * change roles assigned to users, without them needing the 'administer access
 * control' permission.
 *
 * It provides its own tab in the user profile so that roles can be changed
 * without needing access to the user edit form.
 */

/**
 * Implements hook_theme().
 */
function role_delegation_theme() {
  return array(
    'role_delegation_delegate_roles_action_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function role_delegation_permission() {
  $roles = _role_delegation_roles();
  foreach ($roles as $role_name => $role) {
    $perms["assign $role_name role"] = array(
      'title' => t('Assign @role role', array('@role' => $role)),
      'description' => t('Grant permission to assign @role role. WARNING: Assign this permission to trusted users only.', array('@role' => $role)),
      'restrict access' => TRUE,
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function role_delegation_menu() {
  $items['user/%user/roles'] = array(
    'title' => 'Roles',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('role_delegation_roles_form', 1),
    'access callback' => 'role_delegation_access',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Helper function to create the role options.
 */
function _role_delegation_add_roles_to_form(&$form, $account) {
  $roles_current = $account->roles;

  $roles_delegate = array();
  $roles = _role_delegation_roles();
  $assign_role_delegation = FALSE;
  foreach ($roles as $role_name => $role) {
    if (user_access('assign roles') || user_access("assign $role_name role")) {
      $roles_delegate[$role_name] = isset($form['account']['roles']['#options'][$role_name]) ? $form['account']['roles']['#options'][$role_name] : $role;
      $assign_role_delegation = TRUE;
    }
  }

  if (empty($roles_delegate)) {
    // No role can be assigned.
    return;
  }

  if (!isset($form['account'])) {
    $form['account'] = array(
      '#type' => 'value',
      '#value' => $account,
    );
  }

  $form['roles_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles settings'),
    '#weight' => 1,
    '#access' => $assign_role_delegation,
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
  );

  // Generate the form items.
  $form['roles_settings']['roles_change'] = array(
    '#type' => 'checkboxes',
    '#title' => isset($form['account']['roles']['#title']) ? $form['account']['roles']['#title'] : t('Roles'),
    '#options' => $roles_delegate,
    '#default_value' => array_intersect($roles_current, array_keys($roles_delegate)),
    '#description' => isset($form['account']['roles']['#description']) ? $form['account']['roles']['#description'] : t('Change roles assigned to user.'),
  );
}

/**
 * Provides a form for assigning roles to the current user.
 */
function role_delegation_roles_form($form, $form_state, $account) {
  _role_delegation_add_roles_to_form($form, $account);
  $form['roles_settings']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Saves the roles assigned to the account given in the form.
 */
function role_delegation_roles_form_submit($form, $form_state) {
  if (!is_array($form_state['values']['roles_change'])) {
    return;
  }

  $account = role_delegation_roles_update($form_state['values']['account'], $form_state['values']['roles_change']);
  user_save($account);

  backdrop_set_message(t('The roles have been updated.'));
}

/**
 * Update the roles.
 */
function role_delegation_roles_update($account, $roles_change) {
  foreach ($roles_change as $role_name => $value) {
    if (empty($value)) {
      $index = array_search($role_name, $account->roles);
      if ($index !== FALSE) {
        unset($account->roles[$index]);
      }
    } elseif (!in_array($value, $account->roles)) {
      $account->roles[] = $value;
    }
  }
  return $account;
}

/**
 * Access callback for menu hook.
 */
function role_delegation_access() {
  // Check access to user profile page.
  if (!user_access('access user profiles')) {
    return FALSE;
  }
  // Check access to role assignment page.
  if (user_access('assign roles')) {
    return TRUE;
  }
  $perms = array_keys(role_delegation_permission());
  foreach ($perms as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns all existing roles, except anonymous, authenticated and
 * administrator roles.
 */
function _role_delegation_roles() {
  $roles = user_roles(TRUE);
  unset($roles[BACKDROP_AUTHENTICATED_ROLE]);
  // Do not allow to delegate users to administator role. Let's keep this
  // privilege to users with 'Administer permissions' permission only.
  unset($roles[config_get('system.core', 'user_admin_role')]);
  return $roles;
}

/**
 * Implements hook_form_alter().
 */
function role_delegation_form_alter(&$form, $form_state, $form_id) {
  // Only add role delegation options to:
  // * Registration tab of account registration form
  // * Account editing tab of account editing form
  // These are normally the only tabs present on those forms, but other tabs
  // may be added by other modules, e.g. profile editing tabs by Profile.
  if (!(($form_id == 'user_register_form') || ($form_id == 'user_profile_form'))) {
    return;
  }
  if (user_access('assign roles')) {
    return;
  }

  $account = $form['#user'];
  _role_delegation_add_roles_to_form($form, $account);
}

/**
 * Implements hook_user_presave().
 */
function role_delegation_user_presave($account) {
  if (isset($account->roles_change)) {
    $account = role_delegation_roles_update($account, $account->roles_change);
  }
}

/**
 * Implements hook_action_info().
 */
function role_delegation_action_info() {
  $roles = user_roles(TRUE, NULL, TRUE);
  $index = 0;
  $actions = array();
  foreach ($roles as $role_name => $role) {
    if ($role_name === BACKDROP_AUTHENTICATED_ROLE) {
      continue;
    }
    if (user_access('assign roles') || !user_access("assign $role_name role")) {
      continue;
    }
    $index++;

    $actions['role_delegation_add_role_' . $role_name] = array(
      'label' => t('Add role "@label"', array('@label' => $role->label)),
      'type' => 'user',
      'callback' => 'role_delegation_add_role_action',
      'weight' => 120 + $index,
      'role_name' => $role_name,
    );
    $actions['role_delegation_remove_role_' . $role_name] = array(
      'label' => t('Remove role "@label"', array('@label' => $role->label)),
      'type' => 'user',
      'callback' => 'role_delegation_remove_role_action',
      'weight' => 150 + $index,
      'role_name' => $role_name,
    );
  }

  return $actions;
}

/**
 * Adds a role to a user account.
 *
 * @param User $account
 *   The user entity to which the role will be added.
 *
 * @ingroup actions
 */
function role_delegation_add_role_action($account, &$context) {
  $role_name = $context['action_info']['role_name'];
  if (!in_array($role_name, $account->roles)) {
    $account->roles[] = $role_name;
    $account->save();
  }
}

/**
 * Removes a role from a user account.
 *
 * @param User $account
 *   The user entity from which the role will be removed.
 *
 * @ingroup actions
 */
function role_delegation_remove_role_action($account, &$context) {
  $role_name = $context['action_info']['role_name'];
  $index = array_search($role_name, $account->roles);
  if ($index !== FALSE) {
    unset($account->roles[$index]);
    $account->save();
  }
}

/**
 * Implements hook_user_role_delete().
 */
function role_delegation_user_role_delete($role) {
  // For all roles with the particular permission.
  $update_roles = user_roles(TRUE, 'assign ' . $role->name . ' role');
  foreach ($update_roles as $update_role) {
    user_role_change_permissions($update_role, array('assign ' . $role->name . ' role' => FALSE));
  }
}
